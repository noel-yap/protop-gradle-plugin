facets {
  functionalTest {
    parentSourceSet = 'test'
  }
}

compileFunctionalTestJava {
  options.compilerArgs += ['--enable-preview']
}

final envProtopHome = System.getenv('PROTOP_HOME')
final defaultProtopHome = "${buildDir}/protop" as String
final protopHome = envProtopHome ?: defaultProtopHome
final shouldUseLocalProtopExecutable = (protopHome == defaultProtopHome)

functionalTest {
  dependsOn ':createProtopExecutable'

  jvmArgs += ['--enable-preview']

  environment 'PROTOP_HOME', protopHome

  doFirst {
    println "`:functionalTest` using `${protopHome}/bin/protop`." +
        (shouldUseLocalProtopExecutable
            ? '  Set `PROTOP_HOME` to override.'
            : '')
  }
}

task createProtopExecutable {
  final protopSubmodule = gradle.includedBuild('protop')

  onlyIf {
    shouldUseLocalProtopExecutable
  }

  if (shouldUseLocalProtopExecutable) {
    dependsOn protopSubmodule.task(':distFatJar')
  }

  final outputFile = file("${defaultProtopHome}/bin/protop")

  inputs.files file("${protopSubmodule.projectDir}/build/libs/protop.jar")
  outputs.file outputFile

  doFirst {
    mkdir outputFile.getParent()
  }

  doLast {
    outputFile.text = '#!/bin/bash\n'
    outputFile.append('exec java -jar "$0" "$@"\n')
    outputFile.append(inputs.files.first().readBytes())
    outputFile.setExecutable(true)

    println "`:createProtopExecutable` built ${[outputFile, '-v'].execute().text}"
  }
}
